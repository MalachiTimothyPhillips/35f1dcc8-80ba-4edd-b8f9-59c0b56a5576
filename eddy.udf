//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"

// specify in [CASEDATA] in par -- 
// see, for example, gabls.par
static int NUMBER_ELEMENTS_X;
static int NUMBER_ELEMENTS_Y;
static int NUMBER_ELEMENTS_Z;

static dfloat xmin, xmax;
static dfloat ymin, ymax;
static dfloat zmin, zmax;
static dfloat geomScale;

static occa::kernel userfKernel;
static occa::kernel computeHIKernel;
static occa::memory o_locToGlobE;
static occa::memory o_hi;
static occa::memory o_him1;
static occa::memory o_phis;

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata","number_elements_x",NUMBER_ELEMENTS_X);
  platform->par->extract("casedata","number_elements_y",NUMBER_ELEMENTS_Y);
  platform->par->extract("casedata","number_elements_z",NUMBER_ELEMENTS_Z);
  geomScale = 1.0;
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  kernelInfo["defines/p_PI"] = M_PI;
  kernelInfo["defines/p_geomScale"] = geomScale;
  kernelInfo["defines/p_zw"] = 1.7;
  userfKernel = oudfBuildKernel(kernelInfo, "userf");
  computeHIKernel = oudfBuildKernel(kernelInfo, "computeHI");
}

void userf(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_FU)
{
  auto * mesh = nrs->meshV;

  static int il = -1;
  const dfloat ts = 4.0; // should make kernel parameter, so as to not repeat this
  int it = int(time / ts);
  
  if(it != il){
    il = it;
    o_him1.copyFrom(o_hi, NUMBER_ELEMENTS_Z * mesh->Nq * sizeof(dfloat));
    platform->linAlg->fill(NUMBER_ELEMENTS_Z * mesh->Nq, 0.0, o_hi);
    computeHIKernel(NUMBER_ELEMENTS_Z,
                    xmin,
                    xmax,
                    ymin,
                    ymax,
                    zmin,
                    zmax,
                    mesh->o_gllzw,
                    o_hi);
  }

  userfKernel(mesh->Nlocal,
              nrs->fieldOffset,
              NUMBER_ELEMENTS_X,
              NUMBER_ELEMENTS_Y,
              NUMBER_ELEMENTS_Z,
              time,
              o_locToGlobE,
              mesh->o_x,
              mesh->o_y,
              mesh->o_z,
              o_him1,
              o_hi,
              o_FU);
}

void UDF_Setup(nrs_t *nrs)
{
  auto * mesh = nrs->meshV;

  xmax = platform->linAlg->max(mesh->Nlocal, mesh->o_x, platform->comm.mpiComm);
  xmin = platform->linAlg->min(mesh->Nlocal, mesh->o_x, platform->comm.mpiComm);

  ymax = platform->linAlg->max(mesh->Nlocal, mesh->o_y, platform->comm.mpiComm);
  ymin = platform->linAlg->min(mesh->Nlocal, mesh->o_y, platform->comm.mpiComm);

  zmax = platform->linAlg->max(mesh->Nlocal, mesh->o_z, platform->comm.mpiComm);
  zmin = platform->linAlg->min(mesh->Nlocal, mesh->o_z, platform->comm.mpiComm);

  std::vector<dlong> globalElement(mesh->Nelements, 0);
  for(int element = 0; element < mesh->Nelements; ++element){
    const auto ge = nek::lglel(element);
    globalElement[element] = ge;
  }
  
  o_locToGlobE = platform->device.malloc(mesh->Nelements * sizeof(dlong), globalElement.data());

  o_hi = platform->device.malloc(NUMBER_ELEMENTS_Z * mesh->Nq * sizeof(dfloat));
  o_him1 = platform->device.malloc(NUMBER_ELEMENTS_Z * mesh->Nq * sizeof(dfloat));

  o_phis = platform->device.malloc(NUMBER_ELEMENTS_Z * sizeof(dfloat));
  platform->linAlg->fill(NUMBER_ELEMENTS_Z, 1.0, o_phis);

  udf.uEqnSource = &userf;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
}
